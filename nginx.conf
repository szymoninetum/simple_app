events {
  worker_connections  1024;
}

http {

  upstream app {
    server app:8000;
  }

  server_tokens off;

  # Define the MIME types for files.
  include       mime.types;
  default_type  application/octet-stream;

  # Speed up file transfers by using sendfile()
  # TODO: Read up on this
  sendfile on;

  server {
    listen 85;
    server_name localhost;

    location / {
      proxy_pass http://app;
      proxy_http_version 1.1;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
    }
  }
}


#---------------------------------------------------------
# Other solutions for NGINX (do not work):


# server {
#   listen 82;
#   location / {
#     proxy_pass http://frontend:82;
#   }
# }
# server {
#   listen 82;
#   location / {
#     proxy_pass http://backend:82;
#   }
# }
# server {
#   listen 82;
#   location / {
#     proxy_pass http://service:82;
#   }
# }




# ----------------------------------------------------------



# events {}

# http {

#   # upstream all {
#   #   server 127.0.0.1:82;
#   #   #server localhost:8002;
#   # }
#   server {
#      listen 82;
  
#      location / {
#         #resolver 127.0.0.1 valid=30s;
#         proxy_pass http://app:82;
#         proxy_set_header Host $host;
#   }
#  }
# }




#--------------------------------------------------------
# upstream service_a {
#     Here we configure Nginx where to redirect the traffic
#     server service_a:82;
# }

# server {
#     The port on which our proxy is listening 
#     listen 82;
#     Domain for which traffic is to be redirected
#     server_name dns 127.0.0.11:53;

#     Forward Host header
#     proxy_set_header Host $host;

#     We want all locations to point to service A
#     location / {
#         service_a is our upstream
#         proxy_pass http://0.0.0.0:service_a;
#     }
# }

# upstream service_b {
#     server service_b:82;
# }

# server {
#     listen 82;
#     server_name dns 127.0.0.11:53;

#     proxy_set_header Host $host;

#     location / {
#         proxy_pass http://0.0.0.0:service_b;
#     }
# } 

#---------------------------------------------------------------

# server {

# listen 82;

# server_name localhost; location / {

#      return 301 https://$host$request_uri;

# }

# }server {

# listen 443 ssl;

# server_name localhost;

# location / {

#      proxy_pass http://localhost;

# }

# }


#----------------------------------------------------------------

# server {
#     listen 82;
#     server_name 127.0.0.11:53;
    
#     # Docker DNS
#     resolver 127.0.0.11;
  
#     location / {
#         # hack to prevent nginx to resolve container's host on start up
#         set $docker_host "app";
#         proxy_pass http://$docker_host:0.0.0.0:82;
#     }
# }

#----------------------------------------------------------------




#-----------------------------------------------------------------


# global
#   log stdout format raw local0 debug

# defaults
#   mode http
#   log global
#   option httplog
#   timeout client 30s
#   timeout server 30s
#   timeout connect 5s

# resolvers pub
#   nameserver dns 127.0.0.11:53
#   hold valid 1s

# frontend http
#   mode http
#   bind 0.0.0.0:82
#   default_backend app

# backend app
#   mode http
#   server-template app 10 app:8000 check resolvers pub inter 200

# listen stats
#   stats enable
#   stats refresh 5s
#   stats show-legends
#   stats uri /
#   bind 0.0.0.0:83
