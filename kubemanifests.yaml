apiVersion: v1
items:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.service: app
      name: app
    spec:
      ports:
        - name: "8000"
          port: 8000
          targetPort: 8000
      selector:
        io.kompose.service: app
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.service: app-postgres
      name: app-postgres
    spec:
      ports:
        - name: "5432"
          port: 5432
          targetPort: 5432
      selector:
        io.kompose.service: app-postgres
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
        kompose.service.type: LoadBalancer
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.service: haproxy-tcp
      name: haproxy-tcp
    spec:
      ports:
        - name: "1080"
          port: 1080
          targetPort: 80
        - name: "1081"
          port: 1081
          targetPort: 81
      selector:
        io.kompose.service: haproxy
      type: LoadBalancer
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
        kompose.service.type: LoadBalancer
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.service: nginx-tcp
      name: nginx-tcp
    spec:
      ports:
        - name: "1085"
          port: 1085
          targetPort: 85
      selector:
        io.kompose.service: nginx
      type: LoadBalancer
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.service: app
      name: app
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: app
      strategy: {}
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
            kompose.version: 1.26.0 (40646f47)
          creationTimestamp: null
          labels:
            io.kompose.network/app.net: "true"
            io.kompose.network/app.nginx: "true"
            io.kompose.service: app
        spec:
          containers:
            - env:
                - name: POSTGRES_DATABASE
                  value: fastapi_database
                - name: POSTGRES_PASSWORD
                  value: app
                - name: POSTGRES_PORT
                  value: "5432"
                - name: POSTGRES_SERVER
                  value: app-postgres
                - name: POSTGRES_USER
                  value: app
              image: app:latest
              name: app
              ports:
                - containerPort: 8000
              resources: {}
          restartPolicy: Always
    status: {}
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      creationTimestamp: null
      name: app.net
    spec:
      ingress:
        - from:
            - podSelector:
                matchLabels:
                  io.kompose.network/app.net: "true"
      podSelector:
        matchLabels:
          io.kompose.network/app.net: "true"
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      creationTimestamp: null
      name: app.nginx
    spec:
      ingress:
        - from:
            - podSelector:
                matchLabels:
                  io.kompose.network/app.nginx: "true"
      podSelector:
        matchLabels:
          io.kompose.network/app.nginx: "true"
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.service: app-postgres
      name: app-postgres
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: app-postgres
      strategy:
        type: Recreate
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
            kompose.version: 1.26.0 (40646f47)
          creationTimestamp: null
          labels:
            io.kompose.network/app.net: "true"
            io.kompose.network/app.nginx: "true"
            io.kompose.service: app-postgres
        spec:
          containers:
            - env:
                - name: POSTGRES_DB
                  value: fastapi_database
                - name: POSTGRES_PASSWORD
                  value: app
                - name: POSTGRES_USER
                  value: app
              image: postgres:9.6-alpine
              name: app-postgres
              ports:
                - containerPort: 5432
              resources: {}
              volumeMounts:
                - mountPath: /var/lib/postgresql/data
                  name: app-postgres-claim0
          restartPolicy: Always
          volumes:
            - name: app-postgres-claim0
              persistentVolumeClaim:
                claimName: app-postgres-claim0
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: app-postgres-claim0
      name: app-postgres-claim0
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
        kompose.service.type: LoadBalancer
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.service: haproxy
      name: haproxy
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: haproxy
      strategy:
        type: Recreate
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
            kompose.service.type: LoadBalancer
            kompose.version: 1.26.0 (40646f47)
          creationTimestamp: null
          labels:
            io.kompose.network/app.net: "true"
            io.kompose.service: haproxy
        spec:
          containers:
            - args:
                - haproxy
                - --
                - /etc/haproxy/haproxy.cfg
              image: haproxy:2.5
              name: haproxy
              ports:
                - containerPort: 80
                - containerPort: 81
              resources: {}
              volumeMounts:
                - mountPath: /etc/haproxy/haproxy.cfg
                  name: haproxy-claim0
          restartPolicy: Always
          volumes:
            - name: haproxy-claim0
              persistentVolumeClaim:
                claimName: haproxy-claim0
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: haproxy-claim0
      name: haproxy-claim0
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
        kompose.service.type: LoadBalancer
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.service: nginx
      name: nginx
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: nginx
      strategy:
        type: Recreate
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.yml -o kubemanifests.yaml
            kompose.service.type: LoadBalancer
            kompose.version: 1.26.0 (40646f47)
          creationTimestamp: null
          labels:
            io.kompose.network/app.nginx: "true"
            io.kompose.service: nginx
        spec:
          containers:
            - image: nginx:1.20
              name: nginx
              ports:
                - containerPort: 85
              resources: {}
              volumeMounts:
                - mountPath: /etc/nginx/nginx.conf
                  name: nginx-claim0
          restartPolicy: Always
          volumes:
            - name: nginx-claim0
              persistentVolumeClaim:
                claimName: nginx-claim0
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: nginx-claim0
      name: nginx-claim0
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}
kind: List
metadata: {}

